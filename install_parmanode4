#!/bin/bash
#accessed from parmanode.com with:
# curl https://parmanode.com/install_parmanode4 | bash

#GLOBAL VARIABLES...
export dn=/dev/null

clear
echo "debug (d) or not <enter>?"
read choice </dev/tty
case $choice in d) export debug4="true" ; export count=0 ;; esac
clear

function stop {
if [[ $debug4 == "true" ]] ; then
echo ""
echo "${FUNCNAME[1]} <-- ${FUNCNAME[2]}" 
echo "${FUNCNAME[1]} at line ${BASH_LINENO[0]}"
echo ""
echo pause $count
read pause </dev/tty
case $pause in d) export debug4="false"
count="$((count + 1))"
export count
;;
esac
fi
}

#These temp directories are for installation only
if [[ -d "/tmp" ]] ; then
    export tmp="/tmp"
elif [[ -d "$HOME/tmp_parmanode" ]] ; then
    export tmp="$HOME/tmp_parmanode" 
else
   mkdir -p $HOME/tmp_parmanode >/dev/null 2>&1
   export tmp="$HOME/tmp_parmanode" 
fi
sudo rm -rf $tmp/* >/dev/null 2>&1

#FUNCTIONS
function sww {
echo -e "Something went wrong \n$1\n\nHit <enter> to continue\n q to exit."
read choice </dev/tty
case $choice in x|q) exit ;; esac
}

function check_architecture {
if [[ $(uname -m) == "aarch64" ]] ; then 
    if [[ $(file /bin/bash | grep 64 | cut -d " " -f 3) != "64-bit" ]] ; then
    clear
    printf "It looks like you are running a 64-bit kernal on a 64-bit microprocessor but 
    with 32-bit binaries. While this is possible (eg Raspbian OS 32-bit for 64-bit
    Raspberry Pis) Electrs can't cope. Aborting. If you really want Electrs on this
    machine, you'll need to install the 64-bit version of the operating system,
    basically starting over completely. Sorry!"

    exit 1
    fi
fi
}

function colours {

export black="\033[30m"
export red="\033[31m"
export green="\033[32m"
export yellow="\033[1;33m"
export blue="\033[34m"
export magenta="\033[35m"
export cyan="\033[36m"
export white="\033[37m"
export reset="\033[0m"
export orange="\033[1m\033[38;2;255;145;0m"
export pink="\033[38;2;255;0;255m"

export bright_black="\033[90m" ; export grey="\033[90m"

export bright_red="\033[91m"
export bright_green="\033[92m"
export bright_yellow="\033[93m"
export bright_blue="\033[94m"
export bright_magenta="\033[95m"
export bright_cyan="\033[96m"
export bright_white="\033[97m"
export blinkon="\033[5m"
export blinkoff="\033[0m"

if [[ $(uname) == "Darwin" ]] ; then export orange="$yellow" 
fi
}


function check_parmanode_exists {
if [[ -d "$HOME/.parmanode4" ]] || [[ -d "$HOME/parman_programs/parmanode4" ]] ; then

    clear

    echo -e "\nParmanode4 seems to already be installed. Updating and exiting.\n"  #update parmanode if it exists...

    if which git >/dev/null ; then
        if ! git config --global user.email >$dn 2>&1 ; then git config --global user.email parman@parmanode.com >$dn 2>&1 ; fi
        if ! git config --global user.name >$dn 2>&1 ; then git config --global user.name Parman >$dn 2>&1 ; fi
        cd $HOME/parman_programs/parmanode4 && git config pull.rebase false && git pull >/dev/null 2>&1
    fi

    exit 
fi
}

function yesornoinstallparmanode {
clear
printf "$orange
############################################################$orange
                   P A R M A N O D E ${green}4$orange
############################################################


  Good call on installing Parmanode. 
  
  This installation will add a few directories and files 
  here and there, and also install some programs that are 
  necessary for Parmanode to function. 
  
  You will be asked to confirm on the next page.

  If Parmanode${cyan}3$orange is installed on your machine, Parmanode${green}4$orange
  will detect that, and any programs you have installed 
  with it, and migrate them across. 
    
  Once that is done, Parmanode${green}4$orange will remove Parmanode${cyan}3$orange
  for you. If you ever lose your mind and uninstall 
  Parmanode${green}4$orange, it will leave your machine nice and clean.


############################################################
$yellow Hit <enter> to continue or 'q' and <enter> to quit$orange

"
read choice </dev/tty ; clear
case $choice in q|Q) exit ;; esac
}

function check_docker {

which docker >/dev/null && return 0

if [[ $(uname) == "Darwin" ]] ; then

    export MacOSVersion=$(sw_vers | grep ProductVersion | awk '{print $ 2}')
    export MacOSVersion_major=$(sw_vers | grep ProductVersion | cut -d \. -f 1 | grep -Eo '[0-9]+$')
    export MacOSVersion_minor=$(sw_vers | grep ProductVersion | cut -d \. -f 2)
    export MacOSVersion_patch=$(sw_vers | grep ProductVersion | cut -d \. -f 3)

    if [[ $MacOSVersion_major -lt 12 ]] ; then
    clear
    echo -e "
    \r########################################################################################

    \r    Sorry, you need MacOS version 12.0 or later to use Parmanode.

    \r    The main issue is that Parmanode4 needs docker on Macs, and Docker is increasingly
    \r    requiring higher and higher versions of MacOS to function.

    \r    You can still salvage the situation by finding an old version of Docker and 
    \r    manually installing it. Then if you run this Parmanode4 installer again, it will
    \r    detect that docker is already installed and running and won't bother you with
    \r    version detection.

    \r########################################################################################
    \r    Hit <enter> to exit.
    "
    read </dev/tty
    exit 0
    fi
    install_docker_mac

elif [[ $(uname) == "Linux" ]] ; then
    install_docker_linux
fi

}


function install_docker_mac {
#called by check_docker

docker ps >/dev/null && return 0

#Downloads and installs for mac

if [[ $(uname -m) == "arm64" ]] ; then
download_docker_file="https://desktop.docker.com/mac/main/arm64/Docker.dmg"
else
download_docker_file="https://desktop.docker.com/mac/main/amd64/Docker.dmg"
fi

echo -e "
########################################################################################
$cyan
                               Downloading Docker...
$orange
########################################################################################
please wait
"

#Download Docker Desktop
if [[ ! -f $tmp/docker/Docker.dmg ]] ; then 
    clear
    mkdir -p $tmp/docker
    cd $tmp/docker && curl -LO $download_docker_file 
fi

#Mount and copy to Applications
if [[ -f $tmp/docker/Docker.dmg ]] ; then 
    hdiutil attach $tmp/docker/Docker.dmg
    sleep 3
    sudo cp -r /Volumes/Docker/Docker.app /Applications 
    diskutil unmount /Volumes/Docker
else
    echo -e "\nDocker.dmg does not exist, can't attach as volume. Aborting.\n"
    exit
fi

nohup open -a "Docker Desktop" >$dn 2>&1 & 

while true ; do
if docker ps >$dn 2>&1  ; then return 0 ; fi
clear ; echo -e "$orange
########################################################################################$green
                         DOCKER$orange is starting, please wait...
########################################################################################

    Docker should be loading; it sometimes could take a minute or so. There may be a
    graphical pop-up: Make sure to accept the terms and conditions if that appears,
    otherwise Parmanode (& Docker) will not work. 

    If there's a problem after a few minutes, try starting Docker yourself. If you
    still have issues installing Docker using Parmanode, try installing Docker
    manually yourself. Parmanode will detect it and use it.
    
    After accepting the terms, you can close the Docker WINDOW. 

    If Parmanode doesn't successfully install Docker, and you fail to as well, then
    carefully place the computer in the bin and buy a new one, preferably Linux, 
    not Mac, and not, God forbid, Windows.

$red
               ####################################################
                 HIT <ENTER> ONCE YOU CONFIRMED DOCKER IS RUNNING 
               ####################################################
$orange
   If you hit <enter> too early, this text will loop. To abort, hit 'q' and <enter>

########################################################################################
"
read choice </dev/tty
case $choice in Q|q|Quit|QUIT) exit 0 ;; *) clear ; continue ;; 
esac 
done

return 0
}

function install_docker_linux {
clear ; echo -e "$orange
########################################################################################
$cyan
                                     DOCKER
$orange 
    Docker is a technology that allows software applications to be packaged and run 
    in a way that is more efficient and portable. With Docker, developers can create 
    "containers" that include all the necessary parts of an application, such as the 
    code, operating system, and other dependencies. These containers are like mini
    virtual computers that run inside real computers.

    Docker is required to run some Apps that Parmanode can install for you.

    Hit <enter> to continue and install, and type 'skip' and <enter> to skip it.

########################################################################################
"
read choice </dev/tty ; case $choice in skip) return 0 ;; esac

clear
echo -e "${green}Cleaning up first...\n"

    sudo apt-get purge docker docker-engine docker.io containerd runc docker-ce \
    docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin \
    docker-ce-rootless-extras -y

# download_docker_linux
sudo apt-get update -y
sudo apt-get install ca-certificates curl gnupg -y
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --yes --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg
sudo apt-get update -y

source /etc/os-release 

    if grep -q UBUNTU_CODENAME /etc/os-release ; then 
    CODENAME=$UBUNTU_CODENAME
    else
    CODENAME=$DEBIAN_CODENAME
    fi

    #url ID value tweaking...
    if [[ $NAME == LMDE ]] ; then
        ID=debian #for docker url
        parmanode_conf_add "ID=debian"
    elif [[ $ID == linuxmint ]] ; then 
        ID=ubuntu
        parmanode_conf_add "ID=ubuntu"
    else
        ID=$ID
        parmanode_conf_add "ID=$ID"
    fi

echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/$ID $(echo $CODENAME) stable" | \
sudo tee /etc/apt/sources.list.d/docker.list >$dn 

#fix ubuntu label to debian if needed:
if [[ $ID == "debian" ]] ; then 
    sudo sed -i 's/ubuntu/debian/g' /etc/apt/sources.list.d/docker.list >> $dp/sed.log 2>&1
fi

sudo apt-get update -y

sudo apt-get install containerd.io docker-ce docker-ce-cli docker-buildx-plugin docker-compose-plugin docker-compose -y 

sudo usermod -aG docker $USER 

clear ; echo -e "$orange
######################################################################################## 

    In order for Docker to run properly, the computer must be restarted.

    But not now, just remember to do it later before running Parmanode.
    
########################################################################################
    Hit <enter> to continue
"
case $choice in q|Q) exit 0 ;; esac
return 0
}


function install_homebrew {

if ! [[ $(uname) == "Darwin" ]] ; then return 0 ; fi
if which brew >/dev/null ; then return 0 ; fi

clear
while true ; do
echo -e "
########################################################################################$cyan
                              HOMEBREW INSTALLATION$orange
########################################################################################

    Homebrew is$red necessary$orange to run Parmanode4. It is a package (software install) 
    manager for MacOS. 

    This can take a while, sometimes with very litte feedback during the process. 

    You may or may not need to respond to some prompts; if there is a recommendation 
    to run a command related to 'git unshallow', then follow that instruction.

    If this fails, you can try to look up instructions to install HomeBrew on your
    Mac yourself, and try the Parmanode4 installation again.

    Proceed or abort? 
$green
                             y)$orange    Install Homebrew
$red
                             n)$orange     Skip (exit)

########################################################################################    
"
read choice </dev/tty ; clear
case $choice in
q|Q) exit ;; n|No|no) exit ;; 
y|Y|yes)

/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" 

echo "PATH=/opt/homebrew/bin:\$PATH" | sudo tee -a $HOME/.zshrc >$dn 2>&1

echo -e "\n\nYou may get a prompt to update the PATH - don't worry, Parmanode has done 
it for you.\n\nHit <enter> to continue."

sleep 4

return 0
;;
*)
clear
echo -e "Invalid choice. Hit <enter> then try again."
;;
esac
done
}

function install_homebrew_packages {

if ! [[ $(uname) == "Darwin" ]] ; then return 0 ; fi

brew update

brew install git openssl
brew install bash
brew install netcat socat
brew install vim tmux jq
brew install tor
brew install gnu-sed gsed
brew install nginx
brew install fcgiwrap
brew install autoconf automake fcgi libtool 
brew install perl rust python
brew install xauth
brew install --cask xquartz
#used for electrs
if ! which clang >$dn 2>&1 ; then brew install --cask clay ; fi
if [[ ! -e /Library/Developer/CommandLineTools ]] ; then
xcode-select --install
# /Library/Developer/CommandLineTools (delete to uninstall build-essentials)
fi

if [[ $(cargo --version | cut -d . -f 2) -lt 63 ]] ; then
brew upgrade rust
fi

#build fastcgi
if ! which fcgiwrap >/dev/null ; then
git clone https://github.com/gnosek/fcgiwrap.git $tmp/fcgiwrap
cd $tmp/fcgiwrap
autoreconf -i
./configure
make
sudo make install
grep -q "/usr/local/sbin" <<<$PATH || echo -e '#ADDED by Parmanode4 ...start flag
export PATH="/usr/local/sbin:$PATH"
#ADDED by Parmanode4 ...end flag' >> ~/.zshrc
source ~/.zshrc
fi

}

function install_linux_packages {

if [[ $(uname) == "Darwin" ]] ; then return 0 ; fi

sudo apt-get update -y
sudo apt-get install -y openssl openssh-server nginx-full python3 python3-pip socat vim nano ssh iproute2 xauth || sww
sudo apt-get install -y net-tools git procps tmux x11-apps netcat-traditional jq || sww
sudo apt-get install -y fcgiwrap unzip tor ufw mdadm e2fsprogs e2fsprogs fuse3 libfuse2 || sww
sudo apt-get install -y clang cmake build-essential automake libtool pkg-config || sww
#sudo  apt-get install-y curl gnupg ca-certificates #installed with docker already
which gsed >/dev/null 2>&1 || sudo ln -s $(which sed) /usr/bin/gsed 
{ pip3 install websockets 2>$dn || pip3 install websockets --break-system-packages ; } || sww
cargo_check
}

function test_nginx {

sudo nginx -t >$dn 2>&1 || { 
    sww "Parmanode tested your Nginx configuration and it has failed. It's not clear
    why it failed, you can see if there is an error message above that might help. You need to
    fix that before Parmanode can be installed. Hit <enter> to exit." 
    exit
    }

}

function  configure_git {
    if ! git config --global user.email >$dn 2>&1 ; then git config --global user.email parman@parmanode.com >$dn 2>&1 ; fi
    if ! git config --global user.name >$dn 2>&1 ; then git config --global user.name Parman >$dn 2>&1 ; fi
}

function clone_parmanode {
git clone https://github.com/armantheparman/parmanode4.git $HOME/parman_programs/parmanode4 2>$dn
cd $HOME/parman_programs/parmanode4 && git config pull.rebase false >$dn 2>&1
}

function source_parmanode_variables {
source $HOME/parman_programs/parmanode4/src/config/parmanode_variables.sh >$dn 2>&1
parmanode_variables
}

function parmanode_directories {
#Check files and directories exist
mkdir -p $HOME/parman_programs
mkdir -p $HOME/parmanode4_apps/{core,knots}
mkdir -p $HOME/.parmanode4/{scripts,verification,logs,config,errors,tmp/core,tmp/knots,tmp/sparrow}
touch    $HOME/.parmanode4/installed.json
touch    $HOME/.parmanode4/parmanode.json
touch    $HOME/.parmanode4/parmanode.log
touch    $HOME/.parmanode4/debug.log
return 0
}

function make_configs {

echo "{
    \"parmanode\": {
    \"version\": \"4.0\",
    \"install_date\": \"$(date +%Y-%m-%d)\",
    \"install_time\": \"$(date +%H:%M:%S)\",
    \"install_os\": \"$(uname -s)\",
    \"install_arch\": \"$(uname -m)\"
    },
    \"installed\": {},
    \"parmadrive\": {}
}" | jq . | tee $tmp/parmanode_conf.json >$dn 2>&1
mv $tmp/parmanode_conf.json $pj
}

function make_desktop_text {
#make desktop text document...
if [[ ! -e $HOME/Desktop/parmanode4_info.txt ]] ; then
cat <<'EOF' | tee $HOME/Desktop/run_parmanode4.txt >/dev/null

To run Parmanode, simply open a browser and visit:

http://parmanode4.local:58000

Good idea to bookmark that address, then you can delete this text document.
EOF
fi
}

function enable_mac_ssh_logins {
if [[ $OS == "Mac" ]] ; then
#enable ssh logins
sudo systemsetup -setremotelogin on
fi
}

function source_parmanode_services {
    for file in $HOME/parman_programs/parmanode4/src/services/*.sh ; do
    source $file
    done
}

function copy_scripts_2_dot_parmanode {
cp $pn/scripts/* $dp/scripts/
sudo chmod +x $dp/scripts/*
}

function cargo_check {
if which cargo ; then
    source $HOME/.cargo/env 
    if [[ $(cargo --version | cut -d . -f 2) -lt 63 ]] ; then
         #will uninstall then reinstall cargo, because < 63 version
         sudo apt-get purge cargo rustc -y
         curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs/ | sh -s -- -y || sww "Cargo failed install"
         source $HOME/.cargo/env 
         if [[ $(cargo --version | cut -d . -f 2) -lt 63 ]] ; then 
            sww "Cargo -- too old, version error: $(cargo --version)" 
         fi
    fi
else
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs/ | sh -s -- -y || sww "Cargo failed install"
    source $HOME/.cargo/env 
    if [[ $(cargo --version | cut -d . -f 2) -lt 63 ]] ; then 
        sww "Cargo -- too old, version error: $(cargo --version)" 
    fi
fi
}

function install_parmaview {

if [[ $(uname) == "Darwin" ]] ; then return 0 ; fi

#CGI
sudo systemctl disable fcgiwrap >$dn 2>&1 #in case it is running (needs modification)
sudo mkdir -p /etc/systemd/system/fcgiwrap.service.d
cat<<EOS | sudo tee /etc/systemd/system/fcgiwrap.service.d/override.conf >$dn 2>&1
[Service]
User=$USER
Group=$USER
EOS
sudo systemctl enable --now fcgiwrap >$dn 2>&1


#Nginx
if ! [[ $silent == "true" ]] ; then
netstat -tuln 2>$dn | grep -q :58000 && { sww "Port 58000 is already in use. Proceed with caution." ; }
fi

    #SCRIPT_FILENAME neessary for fcgiwrap to know what to execute
    #Other variables are for the script

cat <<EOF | sudo tee $parmaviewnginx >$dn 2>&1
server {
    #version 1
    listen 58000;
    server_name localhost parmanodl.local parmadrive.local parmanode.local ;
    root $wwwparmaviewdir;
    index index.html;

    location ~ /cgi-bin/.*\.sh {
        fastcgi_split_path_info ^(/.*\.sh)(/.*)?$;
        include fastcgi_params;
        fastcgi_pass unix:/var/run/fcgiwrap.socket;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        fastcgi_param PATH_INFO \$fastcgi_path_info;
        fastcgi_param HOME $HOME;
    }

    location /ws/ {
        proxy_pass http://127.0.0.1:58001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;

    }

    location / {
        index index.html;
        try_files \$uri \$uri/ =404;
    }
}
EOF
sudo systemctl restart nginx

#Mount to directory accessible by www-data (nginx)
sudo mkdir -p $wwwparmaviewdir
sudo mount --bind $HOME/parman_programs/parmanode4/parmaview/ $wwwparmaviewdir || sww "Mounting cgi-bin failed."
sudo mkdir -p /run/parmanode
sudo chmod 2771 /run/parmanode
sudo chown parman:www-data /run/parmanode

}

function do_install {



check_architecture 
colours
check_parmanode_exists
yesornoinstallparmanode
check_docker #107
install_homebrew #320
install_homebrew_packages #375
install_linux_packages #441
#test nginx - if there is a previous install and messed up configuration, it will break Parmanode4
test_nginx
configure_git  #473
clone_parmanode #478
source_parmanode_variables #483
parmanode_directories #429
make_configs
make_desktop_text
enable_mac_ssh_logins

source_parmanode_services
    make_parmanode_service
    make_background_bitcoin_download_service
    make_background_electrs_download_service
    make_background_electrum_download_service
    make_socat_service
    make_javascript_server_service
    copy_scripts_2_dot_parmanode

install_parmaview #set up for Linux only at this stage
sudo systemctl start download_bitcoin_service >$dn 2>&1 
test_parmanode4_install
}

function swwtest {
echo -e "Something went wrong \n$1\n\nHit <enter> to continue\n q to exit."
read choice </dev/tty
export tests_all_passed="false"
case $choice in x|q) exit ;; esac
}


function test_parmanode4_install {
unset tests_all_passed

echo -e "\nTesting installation. Please wait..." ; sleep 0.5

docker ps >$dn || { echo -e "\n    Docker not detected. Either it didn't install properly, or the
    the computer needs a little reboot. Hit <enter> to continue tests." ; read </dev/tty ; }

test -d $HOME/parman_programs || swwtest "no parman_programs"
test -d $HOME/parman_programs/parmanode4 || swwtest "no parman_programs/parmanode4"
test -d $HOME/.parmanode4 || swwtest "no $HOME/.parmanode4"
sudo test -d $wwwparmaviewdir || swwtest "no $wwwparmaviewdir"
sudo test -d /run/parmanode || swwtest "/run/parmanode directory not found"

[[ $(uname) == "Darwin" ]] && ! which brew && { echo -e "HomeBrew not detected. Maybe try installing it yourself. 
    Hit <enter> to continue tests." ; read </dev/tty ; }

which netcat >$dn || swwtest "netcat not detected."
which jq >$dn || swwtest "jq not detected."
which vim >$dn || swwtest "vim not detected."
which socat >$dn || swwtest "socat not detected."
which nano >$dn || swwtest "nano not detected."
which ssh >$dn || swwtest "ssh not detected."
which nc >$dn || swwtest "nc not detected."
which tmux >$dn || swwtest "tmux not detected."
which unzip >$dn || swwtest "unzip not detected."
which tor >$dn || swwtest "tor not detected."
which gsed >$dn || swwtest "gsed not detected."
sudo which nginx >$dn || swwtest "nginx not detected."
which python3 >$dn || swwtest "Python3 not detected"
which pip3 >$dn || swwtest "pip3 not detected"
which shasum >$dn || swwtest "shasum not detected"
pip3 show websockets >$dn 2>&1 || swwtest "websockets not detected in pip3 list"

[[ $(uname) == "Linux" ]] && { 
    sudo ls /usr/sbin/fcgiwrap >$dn 2>&1 || swwtest "fcgiwrap not detected."
    sudo systemctl status fcgiwrap >$dn 2>&1 || swwtest "fcgiwrap not running"
    #sudo systemctl status pn4_js >$dn 2>&1 || swwtest "parmanode js service not running"
}

[[ $(uname) == "Darwin" ]] && { source $bashrc >$dn 2>&1 ; grep -q /usr/local/sbin <<<$PATH || sww "/usr/local/sbin not in PATH" ; }

sudo test -f $parmaviewnginx || swwtest "parmaviewnginx file not detected"

sudo systemctl status nginx >$dn 2>&1 || swwtest "nginx not running"
return 0
}
##############################################################################################################################
#run it!
##############################################################################################################################

which docker >/dev/null || export reboot="\r    Please reboot before using Parmanode.\n\n\n"

do_install #and test
    if [[ $tests_all_passed != "false" ]] ; then
        echo -e "\n\n\n\r    SUCCESS! \n\n\n$reboot"
    else
        echo -e "\n\n\n\r    Install finished, but at least one thing went wrong.\n\n\n"
    fi
sudo rm -rf $tmp/* >/dev/null 2>&1

##############################################################################################################################